package e63.course.assignment4;

import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.JavaSparkContext;

public class Assignment4_Problem4_AdditionalPart {
	public static void main(String[] args) throws Exception {
		String inputFile = args[0];
		String outputFile = args[1];
		// Create a Java Spark Context.
		SparkConf conf = new SparkConf().setMaster("local").setAppName("Assignment4_Problem4_AdditionalPart");
		conf.set("textinputformat.record.delimiter", ".");
		JavaSparkContext sc = new JavaSparkContext(conf);

		Configuration conf2 = new Configuration(sc.hadoopConfiguration());
		conf2.set("textinputformat.record.delimiter", ".");

		// Load our input data.
		JavaPairRDD<LongWritable, Text> inputFileSplitIntoSentences = sc.newAPIHadoopFile("hgj", TextInputFormat.class,
				LongWritable.class, Text.class, conf2);
		// Split up into words.
		// JavaRDD<String> words = input.flatMap(new FlatMapFunction<String,
		// String>() {
		//
		// private static final long serialVersionUID = 1L;
		//
		// public Iterable<String> call(String x) {
		// return getBigrams(x);
		// }
		// });
		// Transform into word and count.
		// JavaPairRDD<String, Integer> counts = words.mapToPair(new
		// PairFunction<String, String, Integer>() {
		//
		// private static final long serialVersionUID = 1L;
		//
		// public Tuple2<String, Integer> call(String x) {
		// return new Tuple2<String, Integer>(x, 1);
		// }
		// }).reduceByKey(new Function2<Integer, Integer, Integer>() {
		//
		// private static final long serialVersionUID = 1L;
		//
		// public Integer call(Integer x, Integer y) {
		// return x + y;
		// }
		// }).sortByKey();
		// Save the word count back out to a text file, causing evaluation.
		counts.saveAsTextFile(outputFile);
	}

	public static List<String> getBigrams(String sentence) {
		StringTokenizer tokenizer = new StringTokenizer(sentence);
		int numberOfWordsInSentence = tokenizer.countTokens();
		if (numberOfWordsInSentence < 2) {
			return new ArrayList<String>(0);
		}

		List<String> wordsInSentence = new ArrayList<String>(numberOfWordsInSentence);
		while (tokenizer.hasMoreTokens()) {
			wordsInSentence.add(tokenizer.nextToken());
		}

		List<String> bigrams = new ArrayList<String>(numberOfWordsInSentence - 1);
		for (int wordCounter = 0; wordCounter < numberOfWordsInSentence - 1; wordCounter++) {
			String firstWord = wordsInSentence.get(wordCounter);
			if (firstWord.endsWith(".")) {
				continue;
			}
			firstWord = firstWord.replaceAll("[^A-Za-z0-9]", "").toLowerCase();
			String secondWord = wordsInSentence.get(wordCounter + 1).replaceAll("[^A-Za-z0-9]", "").toLowerCase();
			if (firstWord.isEmpty() || secondWord.isEmpty()) {
				continue;
			}
			bigrams.add(firstWord + " " + secondWord);
		}
		return bigrams;
	}
}
