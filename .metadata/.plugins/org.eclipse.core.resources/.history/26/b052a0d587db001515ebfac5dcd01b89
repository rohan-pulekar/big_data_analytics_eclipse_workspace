package e63.course.assignment4;

import java.util.Arrays;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;

import scala.Tuple2;

public class Assignment4_Problem1 {
	public static void main(String[] args) throws Exception {

		// set input and out diles/dirs
		String inputFileName = args[0];
		String outputDirName = args[1];

		// Create a Java Spark Condifguration.
		SparkConf sparkConf = new SparkConf().setMaster("local").setAppName("Assignment4_Problem1");

		// Create a Java Spark Context
		JavaSparkContext sparkContext = new JavaSparkContext(sparkConf);

		// Load the input data.
		JavaRDD<String> inputFileContents = sparkContext.textFile(inputFileName);

		// Split the input data into words
		JavaRDD<String> wordsList = inputFileContents.flatMap(new FlatMapFunction<String, String>() {

			private static final long serialVersionUID = 1L;

			public Iterable<String> call(String line) {
				return Arrays.asList(line.split(" "));
			}
		});
		
		// Transform into word and count.
		JavaPairRDD<String, Integer> wordsListWithDefaultCount = wordsList
				.mapToPair(new PairFunction<String, String, Integer>() {

					private static final long serialVersionUID = 1L;

					public Tuple2<String, Integer> call(String x) {
						x = x.replaceAll("[^A-Za-z0-9]", "").toLowerCase();
						return new Tuple2<String, Integer>(x, 1);
					}
				});
		JavaPairRDD<String, Integer> filteredWordsList = wordsListWithDefaultCount
				.filter((Tuple2<String, Integer> tuple) -> !tuple._1.isEmpty());
		JavaPairRDD<String, Integer> wordsAndTheirCount = filteredWordsList
				.reduceByKey(new Function2<Integer, Integer, Integer>() {

					private static final long serialVersionUID = 1L;

					public Integer call(Integer x, Integer y) {
						return x + y;
					}
				});
		JavaPairRDD<String, Integer> sortedWordsAndTheirCount = wordsAndTheirCount.sortByKey();
		// Save the word count back out to a text file, causing evaluation.
		sortedWordsAndTheirCount.saveAsTextFile(outputDirName);
		sparkContext.close();
	}
}
