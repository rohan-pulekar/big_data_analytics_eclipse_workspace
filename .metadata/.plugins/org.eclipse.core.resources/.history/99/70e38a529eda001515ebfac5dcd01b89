package e63.course.assignment4;

import java.util.ArrayList;
import java.util.List;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;

import scala.Tuple2;

public class Assignment4_Problem2 {
	public static void main(String[] args) throws Exception {
		String inputFile = args[0];
		String outputFile = args[1];
		// Create a Java Spark Context.
		SparkConf conf = new SparkConf().setMaster("local").setAppName("Assignment4_Problem2");
		JavaSparkContext sc = new JavaSparkContext(conf);

		// Load our input data.
		JavaRDD<String> input = sc.textFile(inputFile);
		// Split up into words.
		JavaRDD<String> words = input.flatMap(new FlatMapFunction<String, String>() {

			private static final long serialVersionUID = 1L;

			public Iterable<String> call(String x) {
				if (x == null) {
					return null;
				}
				x = x.replaceAll("[^A-Za-z0-9]", "").toLowerCase();
				if (x.isEmpty()) {
					return null;
				}
				return getBigrams(x);
			}
		});
		// Transform into word and count.
		JavaPairRDD<String, Integer> counts = words.mapToPair(new PairFunction<String, String, Integer>() {

			private static final long serialVersionUID = 1L;

			public Tuple2<String, Integer> call(String x) {
				if (x == null)
					return new Tuple2<String, Integer>(x, 1);
			}
		}).reduceByKey(new Function2<Integer, Integer, Integer>() {

			private static final long serialVersionUID = 1L;

			public Integer call(Integer x, Integer y) {
				return x + y;
			}
		});
		// Save the word count back out to a text file, causing evaluation.
		counts.saveAsTextFile(outputFile);
	}

	private static List<String> getBigrams(String str) {
		String wordsInString[] = str.split(" ");
		if (wordsInString.length < 2) {
			return null;
		}
		List<String> bigrams = new ArrayList<String>(wordsInString.length - 1);
		for (int wordCounter = 0; wordCounter < wordsInString.length - 1; wordCounter++) {
			bigrams.add(wordsInString[wordCounter] + " " + wordsInString[wordCounter + 1]);
		}
		return bigrams;
	}
}
