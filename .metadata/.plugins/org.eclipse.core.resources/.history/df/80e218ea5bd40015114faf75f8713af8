
package org.apache.hadoop.examples;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.io.WritableComparator;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.KeyValueTextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;

public class Assignment3_Problem2 {

	public static class TokenizerMapper extends Mapper<Text, Text, Text, IntWritable> {

		IntWritable wordCount = new IntWritable();

		public void map(Text key, Text value, Context context) throws IOException, InterruptedException {
			try {
				wordCount.set(Integer.parseInt(value.toString()));
			} catch (NumberFormatException nfe) {
				wordCount.set(0);
			}
			context.write(key, wordCount);
		}
	}

	public static class Problem2Reducer extends Reducer<Text, IntWritable, Text, IntWritable > {

		public void reduce(IntWritable key, Iterable<Text> values, Context context)
				throws IOException, InterruptedException {
			for (Text value : values) {
				context.write(key, value);
			}
		}
	}

	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();
		if (otherArgs.length < 2) {
			System.err.println("Usage: wordcount <in> [<in>...] <out>");
			System.exit(2);
		}
		Job job = Job.getInstance(conf, "Assignment3_Problem2");
		job.setJarByClass(Assignment3_Problem2.class);
		job.setMapperClass(TokenizerMapper.class);
		job.setCombinerClass(Problem2Reducer.class);
		job.setReducerClass(Problem2Reducer.class);
		job.setOutputKeyClass(IntWritable.class);
		job.setOutputValueClass(Text.class);
		job.setSortComparatorClass(DescendingKeyComparator.class);
		job.setInputFormatClass(KeyValueTextInputFormat.class);
		for (int i = 0; i < otherArgs.length - 1; ++i) {
			FileInputFormat.addInputPath(job, new Path(otherArgs[i]));
		}
		FileOutputFormat.setOutputPath(job, new Path(otherArgs[otherArgs.length - 1]));
		System.exit(job.waitForCompletion(true) ? 0 : 1);
	}

	public static class DescendingKeyComparator extends WritableComparator {
		protected DescendingKeyComparator() {
			super(Text.class, true);
		}

		@SuppressWarnings("rawtypes")
		@Override
		public int compare(WritableComparable w1, WritableComparable w2) {
			Text key1 = (Text) w1;
			Text key2 = (Text) w2;
			return -1 * key1.compareTo(key2);
		}
	}
}
