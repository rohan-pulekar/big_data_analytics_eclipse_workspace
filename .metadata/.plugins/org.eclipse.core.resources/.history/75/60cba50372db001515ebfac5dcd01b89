package e63.course.assignment4;

import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.api.java.function.FlatMapFunction;

import scala.Tuple2;

public class Assignment4_Problem4_AdditionalPart {
	public static void main(String[] args) throws Exception {
		String inputFile = args[0];
		String outputFile = args[1];
		// Create a Java Spark Context.
		SparkConf conf = new SparkConf().setMaster("local").setAppName("Assignment4_Problem4");
		JavaSparkContext sc = new JavaSparkContext(conf);

		// Load our input data.
		JavaRDD<String> input = sc.textFile(inputFile);

		JavaRDD<String> words = input.flatMap(new FlatMapFunction<Tuple2<String, String>, String>() {

			private static final long serialVersionUID = 1L;

			public Iterable<String> call(Tuple2<String, String> tuple) {
				return new ArrayList<String>();
			}
		});
		input.saveAsTextFile(outputFile);
	}

	public static List<String> getBigrams(String sentence) {
		StringTokenizer tokenizer = new StringTokenizer(sentence);
		int numberOfWordsInSentence = tokenizer.countTokens();
		if (numberOfWordsInSentence < 2) {
			return new ArrayList<String>(0);
		}

		List<String> wordsInSentence = new ArrayList<String>(numberOfWordsInSentence);
		while (tokenizer.hasMoreTokens()) {
			wordsInSentence.add(tokenizer.nextToken());
		}

		List<String> bigrams = new ArrayList<String>(numberOfWordsInSentence - 1);
		for (int wordCounter = 0; wordCounter < numberOfWordsInSentence - 1; wordCounter++) {
			String firstWord = wordsInSentence.get(wordCounter);
			if (firstWord.endsWith(".")) {
				continue;
			}
			firstWord = firstWord.replaceAll("[^A-Za-z0-9]", "").toLowerCase();
			String secondWord = wordsInSentence.get(wordCounter + 1).replaceAll("[^A-Za-z0-9]", "").toLowerCase();
			if (firstWord.isEmpty() || secondWord.isEmpty()) {
				continue;
			}
			bigrams.add(firstWord + " " + secondWord);
		}
		return bigrams;
	}
}
